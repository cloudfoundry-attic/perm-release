// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"context"
	"io"
	"sync"

	"code.cloudfoundry.org/cloud-controller-migrator/cmd"
	"code.cloudfoundry.org/lager"
)

type FakeCloudControllerAPIClient struct {
	MakePaginatedGetRequestStub        func(ctx context.Context, logger lager.Logger, route string, bodyCallback func(context.Context, lager.Logger, io.Reader) error) error
	makePaginatedGetRequestMutex       sync.RWMutex
	makePaginatedGetRequestArgsForCall []struct {
		ctx          context.Context
		logger       lager.Logger
		route        string
		bodyCallback func(context.Context, lager.Logger, io.Reader) error
	}
	makePaginatedGetRequestReturns struct {
		result1 error
	}
	makePaginatedGetRequestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudControllerAPIClient) MakePaginatedGetRequest(ctx context.Context, logger lager.Logger, route string, bodyCallback func(context.Context, lager.Logger, io.Reader) error) error {
	fake.makePaginatedGetRequestMutex.Lock()
	ret, specificReturn := fake.makePaginatedGetRequestReturnsOnCall[len(fake.makePaginatedGetRequestArgsForCall)]
	fake.makePaginatedGetRequestArgsForCall = append(fake.makePaginatedGetRequestArgsForCall, struct {
		ctx          context.Context
		logger       lager.Logger
		route        string
		bodyCallback func(context.Context, lager.Logger, io.Reader) error
	}{ctx, logger, route, bodyCallback})
	fake.recordInvocation("MakePaginatedGetRequest", []interface{}{ctx, logger, route, bodyCallback})
	fake.makePaginatedGetRequestMutex.Unlock()
	if fake.MakePaginatedGetRequestStub != nil {
		return fake.MakePaginatedGetRequestStub(ctx, logger, route, bodyCallback)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.makePaginatedGetRequestReturns.result1
}

func (fake *FakeCloudControllerAPIClient) MakePaginatedGetRequestCallCount() int {
	fake.makePaginatedGetRequestMutex.RLock()
	defer fake.makePaginatedGetRequestMutex.RUnlock()
	return len(fake.makePaginatedGetRequestArgsForCall)
}

func (fake *FakeCloudControllerAPIClient) MakePaginatedGetRequestArgsForCall(i int) (context.Context, lager.Logger, string, func(context.Context, lager.Logger, io.Reader) error) {
	fake.makePaginatedGetRequestMutex.RLock()
	defer fake.makePaginatedGetRequestMutex.RUnlock()
	return fake.makePaginatedGetRequestArgsForCall[i].ctx, fake.makePaginatedGetRequestArgsForCall[i].logger, fake.makePaginatedGetRequestArgsForCall[i].route, fake.makePaginatedGetRequestArgsForCall[i].bodyCallback
}

func (fake *FakeCloudControllerAPIClient) MakePaginatedGetRequestReturns(result1 error) {
	fake.MakePaginatedGetRequestStub = nil
	fake.makePaginatedGetRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudControllerAPIClient) MakePaginatedGetRequestReturnsOnCall(i int, result1 error) {
	fake.MakePaginatedGetRequestStub = nil
	if fake.makePaginatedGetRequestReturnsOnCall == nil {
		fake.makePaginatedGetRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makePaginatedGetRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudControllerAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.makePaginatedGetRequestMutex.RLock()
	defer fake.makePaginatedGetRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudControllerAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.CloudControllerAPIClient = new(FakeCloudControllerAPIClient)
