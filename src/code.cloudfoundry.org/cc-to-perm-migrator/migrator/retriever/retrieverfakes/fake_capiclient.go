// Code generated by counterfeiter. DO NOT EDIT.
package retrieverfakes

import (
	"sync"

	"code.cloudfoundry.org/cc-to-perm-migrator/migrator/models"
	"code.cloudfoundry.org/cc-to-perm-migrator/migrator/retriever"
	"code.cloudfoundry.org/lager"
)

type FakeCAPIClient struct {
	GetOrgGUIDsStub        func(logger lager.Logger) ([]string, error)
	getOrgGUIDsMutex       sync.RWMutex
	getOrgGUIDsArgsForCall []struct {
		logger lager.Logger
	}
	getOrgGUIDsReturns struct {
		result1 []string
		result2 error
	}
	getOrgGUIDsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetSpaceGUIDsStub        func(logger lager.Logger, orgGUID string) ([]string, error)
	getSpaceGUIDsMutex       sync.RWMutex
	getSpaceGUIDsArgsForCall []struct {
		logger  lager.Logger
		orgGUID string
	}
	getSpaceGUIDsReturns struct {
		result1 []string
		result2 error
	}
	getSpaceGUIDsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetOrgRoleAssignmentsStub        func(logger lager.Logger, orgGUID string) ([]models.RoleAssignment, error)
	getOrgRoleAssignmentsMutex       sync.RWMutex
	getOrgRoleAssignmentsArgsForCall []struct {
		logger  lager.Logger
		orgGUID string
	}
	getOrgRoleAssignmentsReturns struct {
		result1 []models.RoleAssignment
		result2 error
	}
	getOrgRoleAssignmentsReturnsOnCall map[int]struct {
		result1 []models.RoleAssignment
		result2 error
	}
	GetSpaceRoleAssignmentsStub        func(logger lager.Logger, spaceGUID string) ([]models.RoleAssignment, error)
	getSpaceRoleAssignmentsMutex       sync.RWMutex
	getSpaceRoleAssignmentsArgsForCall []struct {
		logger    lager.Logger
		spaceGUID string
	}
	getSpaceRoleAssignmentsReturns struct {
		result1 []models.RoleAssignment
		result2 error
	}
	getSpaceRoleAssignmentsReturnsOnCall map[int]struct {
		result1 []models.RoleAssignment
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCAPIClient) GetOrgGUIDs(logger lager.Logger) ([]string, error) {
	fake.getOrgGUIDsMutex.Lock()
	ret, specificReturn := fake.getOrgGUIDsReturnsOnCall[len(fake.getOrgGUIDsArgsForCall)]
	fake.getOrgGUIDsArgsForCall = append(fake.getOrgGUIDsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("GetOrgGUIDs", []interface{}{logger})
	fake.getOrgGUIDsMutex.Unlock()
	if fake.GetOrgGUIDsStub != nil {
		return fake.GetOrgGUIDsStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgGUIDsReturns.result1, fake.getOrgGUIDsReturns.result2
}

func (fake *FakeCAPIClient) GetOrgGUIDsCallCount() int {
	fake.getOrgGUIDsMutex.RLock()
	defer fake.getOrgGUIDsMutex.RUnlock()
	return len(fake.getOrgGUIDsArgsForCall)
}

func (fake *FakeCAPIClient) GetOrgGUIDsArgsForCall(i int) lager.Logger {
	fake.getOrgGUIDsMutex.RLock()
	defer fake.getOrgGUIDsMutex.RUnlock()
	return fake.getOrgGUIDsArgsForCall[i].logger
}

func (fake *FakeCAPIClient) GetOrgGUIDsReturns(result1 []string, result2 error) {
	fake.GetOrgGUIDsStub = nil
	fake.getOrgGUIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetOrgGUIDsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.GetOrgGUIDsStub = nil
	if fake.getOrgGUIDsReturnsOnCall == nil {
		fake.getOrgGUIDsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getOrgGUIDsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetSpaceGUIDs(logger lager.Logger, orgGUID string) ([]string, error) {
	fake.getSpaceGUIDsMutex.Lock()
	ret, specificReturn := fake.getSpaceGUIDsReturnsOnCall[len(fake.getSpaceGUIDsArgsForCall)]
	fake.getSpaceGUIDsArgsForCall = append(fake.getSpaceGUIDsArgsForCall, struct {
		logger  lager.Logger
		orgGUID string
	}{logger, orgGUID})
	fake.recordInvocation("GetSpaceGUIDs", []interface{}{logger, orgGUID})
	fake.getSpaceGUIDsMutex.Unlock()
	if fake.GetSpaceGUIDsStub != nil {
		return fake.GetSpaceGUIDsStub(logger, orgGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSpaceGUIDsReturns.result1, fake.getSpaceGUIDsReturns.result2
}

func (fake *FakeCAPIClient) GetSpaceGUIDsCallCount() int {
	fake.getSpaceGUIDsMutex.RLock()
	defer fake.getSpaceGUIDsMutex.RUnlock()
	return len(fake.getSpaceGUIDsArgsForCall)
}

func (fake *FakeCAPIClient) GetSpaceGUIDsArgsForCall(i int) (lager.Logger, string) {
	fake.getSpaceGUIDsMutex.RLock()
	defer fake.getSpaceGUIDsMutex.RUnlock()
	return fake.getSpaceGUIDsArgsForCall[i].logger, fake.getSpaceGUIDsArgsForCall[i].orgGUID
}

func (fake *FakeCAPIClient) GetSpaceGUIDsReturns(result1 []string, result2 error) {
	fake.GetSpaceGUIDsStub = nil
	fake.getSpaceGUIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetSpaceGUIDsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.GetSpaceGUIDsStub = nil
	if fake.getSpaceGUIDsReturnsOnCall == nil {
		fake.getSpaceGUIDsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getSpaceGUIDsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetOrgRoleAssignments(logger lager.Logger, orgGUID string) ([]models.RoleAssignment, error) {
	fake.getOrgRoleAssignmentsMutex.Lock()
	ret, specificReturn := fake.getOrgRoleAssignmentsReturnsOnCall[len(fake.getOrgRoleAssignmentsArgsForCall)]
	fake.getOrgRoleAssignmentsArgsForCall = append(fake.getOrgRoleAssignmentsArgsForCall, struct {
		logger  lager.Logger
		orgGUID string
	}{logger, orgGUID})
	fake.recordInvocation("GetOrgRoleAssignments", []interface{}{logger, orgGUID})
	fake.getOrgRoleAssignmentsMutex.Unlock()
	if fake.GetOrgRoleAssignmentsStub != nil {
		return fake.GetOrgRoleAssignmentsStub(logger, orgGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgRoleAssignmentsReturns.result1, fake.getOrgRoleAssignmentsReturns.result2
}

func (fake *FakeCAPIClient) GetOrgRoleAssignmentsCallCount() int {
	fake.getOrgRoleAssignmentsMutex.RLock()
	defer fake.getOrgRoleAssignmentsMutex.RUnlock()
	return len(fake.getOrgRoleAssignmentsArgsForCall)
}

func (fake *FakeCAPIClient) GetOrgRoleAssignmentsArgsForCall(i int) (lager.Logger, string) {
	fake.getOrgRoleAssignmentsMutex.RLock()
	defer fake.getOrgRoleAssignmentsMutex.RUnlock()
	return fake.getOrgRoleAssignmentsArgsForCall[i].logger, fake.getOrgRoleAssignmentsArgsForCall[i].orgGUID
}

func (fake *FakeCAPIClient) GetOrgRoleAssignmentsReturns(result1 []models.RoleAssignment, result2 error) {
	fake.GetOrgRoleAssignmentsStub = nil
	fake.getOrgRoleAssignmentsReturns = struct {
		result1 []models.RoleAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetOrgRoleAssignmentsReturnsOnCall(i int, result1 []models.RoleAssignment, result2 error) {
	fake.GetOrgRoleAssignmentsStub = nil
	if fake.getOrgRoleAssignmentsReturnsOnCall == nil {
		fake.getOrgRoleAssignmentsReturnsOnCall = make(map[int]struct {
			result1 []models.RoleAssignment
			result2 error
		})
	}
	fake.getOrgRoleAssignmentsReturnsOnCall[i] = struct {
		result1 []models.RoleAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetSpaceRoleAssignments(logger lager.Logger, spaceGUID string) ([]models.RoleAssignment, error) {
	fake.getSpaceRoleAssignmentsMutex.Lock()
	ret, specificReturn := fake.getSpaceRoleAssignmentsReturnsOnCall[len(fake.getSpaceRoleAssignmentsArgsForCall)]
	fake.getSpaceRoleAssignmentsArgsForCall = append(fake.getSpaceRoleAssignmentsArgsForCall, struct {
		logger    lager.Logger
		spaceGUID string
	}{logger, spaceGUID})
	fake.recordInvocation("GetSpaceRoleAssignments", []interface{}{logger, spaceGUID})
	fake.getSpaceRoleAssignmentsMutex.Unlock()
	if fake.GetSpaceRoleAssignmentsStub != nil {
		return fake.GetSpaceRoleAssignmentsStub(logger, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSpaceRoleAssignmentsReturns.result1, fake.getSpaceRoleAssignmentsReturns.result2
}

func (fake *FakeCAPIClient) GetSpaceRoleAssignmentsCallCount() int {
	fake.getSpaceRoleAssignmentsMutex.RLock()
	defer fake.getSpaceRoleAssignmentsMutex.RUnlock()
	return len(fake.getSpaceRoleAssignmentsArgsForCall)
}

func (fake *FakeCAPIClient) GetSpaceRoleAssignmentsArgsForCall(i int) (lager.Logger, string) {
	fake.getSpaceRoleAssignmentsMutex.RLock()
	defer fake.getSpaceRoleAssignmentsMutex.RUnlock()
	return fake.getSpaceRoleAssignmentsArgsForCall[i].logger, fake.getSpaceRoleAssignmentsArgsForCall[i].spaceGUID
}

func (fake *FakeCAPIClient) GetSpaceRoleAssignmentsReturns(result1 []models.RoleAssignment, result2 error) {
	fake.GetSpaceRoleAssignmentsStub = nil
	fake.getSpaceRoleAssignmentsReturns = struct {
		result1 []models.RoleAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) GetSpaceRoleAssignmentsReturnsOnCall(i int, result1 []models.RoleAssignment, result2 error) {
	fake.GetSpaceRoleAssignmentsStub = nil
	if fake.getSpaceRoleAssignmentsReturnsOnCall == nil {
		fake.getSpaceRoleAssignmentsReturnsOnCall = make(map[int]struct {
			result1 []models.RoleAssignment
			result2 error
		})
	}
	fake.getSpaceRoleAssignmentsReturnsOnCall[i] = struct {
		result1 []models.RoleAssignment
		result2 error
	}{result1, result2}
}

func (fake *FakeCAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOrgGUIDsMutex.RLock()
	defer fake.getOrgGUIDsMutex.RUnlock()
	fake.getSpaceGUIDsMutex.RLock()
	defer fake.getSpaceGUIDsMutex.RUnlock()
	fake.getOrgRoleAssignmentsMutex.RLock()
	defer fake.getOrgRoleAssignmentsMutex.RUnlock()
	fake.getSpaceRoleAssignmentsMutex.RLock()
	defer fake.getSpaceRoleAssignmentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retriever.CAPIClient = new(FakeCAPIClient)
