// Code generated by counterfeiter. DO NOT EDIT.
package migratorfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/cc-to-perm-migrator/migrator"
)

type FakeReporter struct {
	GenerateReportStub        func(w io.Writer, numAssignments int, errs []error)
	generateReportMutex       sync.RWMutex
	generateReportArgsForCall []struct {
		w              io.Writer
		numAssignments int
		errs           []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReporter) GenerateReport(w io.Writer, numAssignments int, errs []error) {
	var errsCopy []error
	if errs != nil {
		errsCopy = make([]error, len(errs))
		copy(errsCopy, errs)
	}
	fake.generateReportMutex.Lock()
	fake.generateReportArgsForCall = append(fake.generateReportArgsForCall, struct {
		w              io.Writer
		numAssignments int
		errs           []error
	}{w, numAssignments, errsCopy})
	fake.recordInvocation("GenerateReport", []interface{}{w, numAssignments, errsCopy})
	fake.generateReportMutex.Unlock()
	if fake.GenerateReportStub != nil {
		fake.GenerateReportStub(w, numAssignments, errs)
	}
}

func (fake *FakeReporter) GenerateReportCallCount() int {
	fake.generateReportMutex.RLock()
	defer fake.generateReportMutex.RUnlock()
	return len(fake.generateReportArgsForCall)
}

func (fake *FakeReporter) GenerateReportArgsForCall(i int) (io.Writer, int, []error) {
	fake.generateReportMutex.RLock()
	defer fake.generateReportMutex.RUnlock()
	return fake.generateReportArgsForCall[i].w, fake.generateReportArgsForCall[i].numAssignments, fake.generateReportArgsForCall[i].errs
}

func (fake *FakeReporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateReportMutex.RLock()
	defer fake.generateReportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrator.Reporter = new(FakeReporter)
