// Code generated by counterfeiter. DO NOT EDIT.
package migratorfakes

import (
	"log"
	"sync"

	"code.cloudfoundry.org/cc-to-perm-migrator/migrator"
	"code.cloudfoundry.org/cc-to-perm-migrator/migrator/models"
	"code.cloudfoundry.org/lager"
)

type FakeRetriever struct {
	FetchResourcesStub        func(logger lager.Logger, progressLogger *log.Logger, orgs chan<- models.Organization, spaces chan<- models.Space, errs chan<- error)
	fetchResourcesMutex       sync.RWMutex
	fetchResourcesArgsForCall []struct {
		logger         lager.Logger
		progressLogger *log.Logger
		orgs           chan<- models.Organization
		spaces         chan<- models.Space
		errs           chan<- error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetriever) FetchResources(logger lager.Logger, progressLogger *log.Logger, orgs chan<- models.Organization, spaces chan<- models.Space, errs chan<- error) {
	fake.fetchResourcesMutex.Lock()
	fake.fetchResourcesArgsForCall = append(fake.fetchResourcesArgsForCall, struct {
		logger         lager.Logger
		progressLogger *log.Logger
		orgs           chan<- models.Organization
		spaces         chan<- models.Space
		errs           chan<- error
	}{logger, progressLogger, orgs, spaces, errs})
	fake.recordInvocation("FetchResources", []interface{}{logger, progressLogger, orgs, spaces, errs})
	fake.fetchResourcesMutex.Unlock()
	if fake.FetchResourcesStub != nil {
		fake.FetchResourcesStub(logger, progressLogger, orgs, spaces, errs)
	}
}

func (fake *FakeRetriever) FetchResourcesCallCount() int {
	fake.fetchResourcesMutex.RLock()
	defer fake.fetchResourcesMutex.RUnlock()
	return len(fake.fetchResourcesArgsForCall)
}

func (fake *FakeRetriever) FetchResourcesArgsForCall(i int) (lager.Logger, *log.Logger, chan<- models.Organization, chan<- models.Space, chan<- error) {
	fake.fetchResourcesMutex.RLock()
	defer fake.fetchResourcesMutex.RUnlock()
	return fake.fetchResourcesArgsForCall[i].logger, fake.fetchResourcesArgsForCall[i].progressLogger, fake.fetchResourcesArgsForCall[i].orgs, fake.fetchResourcesArgsForCall[i].spaces, fake.fetchResourcesArgsForCall[i].errs
}

func (fake *FakeRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchResourcesMutex.RLock()
	defer fake.fetchResourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrator.Retriever = new(FakeRetriever)
