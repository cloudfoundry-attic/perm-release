// Code generated by counterfeiter. DO NOT EDIT.
package migratorfakes

import (
	"log"
	"sync"

	"code.cloudfoundry.org/cc-to-perm-migrator/migrator"
	"code.cloudfoundry.org/cc-to-perm-migrator/migrator/retriever"
	"code.cloudfoundry.org/lager"
)

type FakeRetriever struct {
	FetchRoleAssignmentsStub        func(logger lager.Logger, progress *log.Logger, assignments chan<- retriever.RoleAssignment, errs chan<- error)
	FetchRoleAssignmentsMutex       sync.RWMutex
	FetchRoleAssignmentsArgsForCall []struct {
		logger      lager.Logger
		progress    *log.Logger
		assignments chan<- retriever.RoleAssignment
		errs        chan<- error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetriever) FetchRoleAssignments(logger lager.Logger, progress *log.Logger, assignments chan<- retriever.RoleAssignment, errs chan<- error) {
	fake.FetchRoleAssignmentsMutex.Lock()
	fake.FetchRoleAssignmentsArgsForCall = append(fake.FetchRoleAssignmentsArgsForCall, struct {
		logger      lager.Logger
		progress    *log.Logger
		assignments chan<- retriever.RoleAssignment
		errs        chan<- error
	}{logger, progress, assignments, errs})
	fake.recordInvocation("FetchRoleAssignments", []interface{}{logger, progress, assignments, errs})
	fake.FetchRoleAssignmentsMutex.Unlock()
	if fake.FetchRoleAssignmentsStub != nil {
		fake.FetchRoleAssignmentsStub(logger, progress, assignments, errs)
	}
}

func (fake *FakeRetriever) FetchRoleAssignmentsCallCount() int {
	fake.FetchRoleAssignmentsMutex.RLock()
	defer fake.FetchRoleAssignmentsMutex.RUnlock()
	return len(fake.FetchRoleAssignmentsArgsForCall)
}

func (fake *FakeRetriever) FetchRoleAssignmentsArgsForCall(i int) (lager.Logger, *log.Logger, chan<- retriever.RoleAssignment, chan<- error) {
	fake.FetchRoleAssignmentsMutex.RLock()
	defer fake.FetchRoleAssignmentsMutex.RUnlock()
	return fake.FetchRoleAssignmentsArgsForCall[i].logger, fake.FetchRoleAssignmentsArgsForCall[i].progress, fake.FetchRoleAssignmentsArgsForCall[i].assignments, fake.FetchRoleAssignmentsArgsForCall[i].errs
}

func (fake *FakeRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.FetchRoleAssignmentsMutex.RLock()
	defer fake.FetchRoleAssignmentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrator.Retriever = new(FakeRetriever)
